********************************************************************************
*                                                                              *
*                              MASH instruments                                *
*                                                                              *
********************************************************************************

This folder contains all the instruments used by the project.

This file contains some basic informations to let you get started with the
implementation of an instrument. It is recommended to read the README file of
the Framework too.


________________________________________________________________________________

Creation of a new instrument
----------------------------

To create a new instrument, it is recommended to use the 'create_instrument.py'
script from the MASH Framework:

  (for this example, assume that the MASH Framework is in ~/mash, and that new
  instruments will be created in ~/instruments)

  ~/mash> ./scripts/create_instrument.py --path=../instruments <USERNAME> <INSTRUMENT_NAME>


Like the heuristics, the name of a instrument (for the Framework) is:

    <USERNAME>/<INSTRUMENT_NAME>

This is why each user MUST put its instruments in a folder with its name.

NOTE: The folder and file names are lower-cased.


________________________________________________________________________________

Implementation of your instrument
---------------------------------

The principle is similar to the implementation of a heuristic: you implement the
methods of a class you are interested in, in the source file created for you by
the 'create_instrument.py' script (see the previous section).

In a nutshell:
 - An instrument implementation inherits from the 'Instrument' interface (in
   mash-instrumentation/instrument.h)
 - The system notifies the instrument about the events happening during the
   experiment
 - The instrument uses a 'DataWriter' object to record whatever data it wants

All those files have detailed comments to help you, and there is more details on
the wiki.


________________________________________________________________________________

Compilation of you instruments
------------------------------

The instruments are compiled when you compile the MASH Framework.

By default, the Framework look for instruments in 'mash/instruments' and
'mash/../instruments' (with 'mash/' being the location of the Framework).
You can change this behavior by modifying the variable MASH_INSTRUMENT_LOCATIONS
when compiling the Framework (do ccmake .. instead of cmake ..).


________________________________________________________________________________

File hierarchy of an instrument
-------------------------------

The instruments are implemented in three parts:

  * the instrument itself (implemented in several source files)
  * some 'views', which are the scripts used by the website to display the
    data recorded by the instrument
  * (not defined yet) the necessary code to analyze the data recorded by the
    instrument

This is a valid file hierarchy for the instruments:

  instruments/
    johndoe/
      instrumentA/
        instrument/
          instrumentA.cpp
        views/
          viewsA.py
          viewsB.py

In that folder, one instrument (johndoe/instrumentA) is implemented, with one
source file (johndoe/instrumentA/instrument/instrumentA.cpp) and two views
(in johndoe/instrumentA/views/).

As in this example, the source code of the instrument MUST be put in an
'instrument/' subfolder, and the views MUST be put in a 'views/' subfolder.
The location of the future analyzing code isn't yet defined.

The name of an instrument is the one of the folder containing all its
subfolders. By convention, the source file containing the instrument subclass
has the same name.

________________________________________________________________________________

Libraries
---------

If several of your instruments share the same piece of code, you can put it in
a library (instead of copying it in each instrument).

All the libraries are located in the folder 'libraries/'. Any instrument can use
the classes and functions from any library.

For example, let's take the following file hierarchy:

  instruments/
    johndoe/
      instrumentA/
        instrument/
          instrumentA.cpp
        views/
          viewsA.py
    libraries/
      greatlibrary/
        utils.h
        utils.cpp

Here the user 'johndoe' has one instrument (in instrumentA/). There is also a
library called 'greatlibrary' available.

The instrument can use the library, by putting

  #include <greatlibrary/utils.h>
  
in its source code (and that's it, nothing more to do).
